name: Update Words Dictionary

on:
  schedule:
    # Run at 12:30 AM UTC every day
    - cron: "30 0 * * *"
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write # Grant permission to push to the repository

jobs:
  update-words:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all branches

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "server/package.json"

      - name: Install dependencies
        run: cd server && npm ci

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Run Puppeteer to get game data
        run: |
          cd server
          node pupeteer.js  # Run Puppeteer script directly

      - name: Compile and Run Solver
        run: |
          cd server
          g++ -std=c++17 code.cpp -o code
          chmod +x code  # Ensure proper execution permissions
          ./code < yesterdaysGrid.txt > predictions.txt  # Directly run the solver

      - name: Process Words and Update words.txt
        run: |
          cd server

          # Process words in a single script
          node - <<EOF
          import fs from 'fs/promises';

          async function updateWords() {
            try {
              const readFileSafe = async (file) => {
                try {
                  return (await fs.readFile(file, 'utf8')).trim().split(/\s+/);
                } catch {
                  return [];
                }
              };

              const actualWords = await readFileSafe('actual-words.txt');
              const predictedWords = await readFileSafe('predictions.txt');
              const currentWords = await readFileSafe('words.txt');

              const wordsToAdd = actualWords.filter(word => !currentWords.includes(word));
              const wordsToRemove = predictedWords.filter(word => !actualWords.includes(word) && currentWords.includes(word));

              if (wordsToAdd.length === 0 && wordsToRemove.length === 0) {
                console.log('No changes needed.');
                process.exit(0);
              }

              const updatedWords = [...new Set([...currentWords, ...wordsToAdd])]
                .filter(word => !wordsToRemove.includes(word));

              await fs.writeFile('words.txt', updatedWords.join('\n'));

              let commitMsg = `Update words.txt: added ${wordsToAdd.length}, removed ${wordsToRemove.length}`;
              await fs.writeFile('commit-msg.txt', commitMsg);
              
              console.log(commitMsg);
              process.exit(1); # Ensure commit runs
            } catch (error) {
              console.error('Error:', error);
              process.exit(1);
            }
          }

          updateWords();
          EOF

      - name: Commit Changes
        if: success()
        run: |
          cd server
          git checkout -B word-updates
          git add words.txt predictions.txt
          git commit -F commit-msg.txt
          git push origin word-updates

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          branch: word-updates
          title: "Automated Words Update"
          body: "This PR updates `words.txt` with new words and removes false positives."
          labels: automated-update
          reviewers: "your-username"

      - name: Auto-Merge PR on Sunday
        if: github.event.schedule == '30 0 * * 0'
        run: gh pr merge --auto --squash word-updates
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
